name: Deploy Prod

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Fazer o checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Configurar credenciais da AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Criar repositório ECS caso não exista
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }}

      # Step 4: Fazer login no repositório ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 5: Fazer build da imagem da aplicação java (baseado do arquivo docker do projeto)
      - name: Build Docker image
        run: |
          docker build -t restaurant-application .
          docker tag restaurant-application:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 6: Fazer push da imagem criada para o repositório ECS
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 7: Instalar kubectl na versão do cluster eks criado
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.31.0'

      # Step 8: Configuração do kubernates
      - name: Set up kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER }}

      # Step 9: Setar valores das variáveis nos arquivos do Kubernetes
      - name: Replace environment variables in k8s files
        run: |
          sed -i "s/{{DB_URL}}/${{ secrets.DB_URL }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{DB_USER}}/${{ secrets.DB_USER }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{DB_PASSWORD}}/${{ secrets.DB_PASSWORD }}/g" k8s/secret-postgres-db.yaml
          sed -i "s/{{ACCOUNT_ID}}/${{ secrets.ACCOUNT_ID }}/g" k8s/deployment.yaml
          sed -i "s/{{AWS_REGION}}/${{ secrets.AWS_REGION }}/g" k8s/deployment.yaml
          sed -i "s/{{ECR_REPOSITORY}}/${{ secrets.ECR_REPOSITORY }}/g" k8s/deployment.yaml

      # Step 10: Aplicar secrets no Kubernetes
      - name: Apply Kubernetes secrets
        run: |
          kubectl apply -f k8s/secret-postgres-db.yaml

      # Step 11: Realizar deploy de imagem do ecs no cluster eks
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/svc-restaurant-application.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl set image deployment/restaurant-application restaurant-application=${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 12: Realizar rollout no cluster eks para aplicar configurações
      - name: Check Deployment rollout status
        run: |
          kubectl rollout status deployment/restaurant-application